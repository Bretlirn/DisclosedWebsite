{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\nconst {\n  InnerState\n} = require(`./inner-state`);\n\nconst {\n  QueryFileError\n} = require(`./errors`);\n\nconst {\n  assertOptions\n} = require(`assert-options`);\n\nconst {\n  ColorConsole\n} = require(`./utils/color`);\n\nconst npm = {\n  fs: require(`fs`),\n  os: require(`os`),\n  path: require(`path`),\n  minify: require(`pg-minify`),\n  utils: require(`./utils`),\n  formatting: require(`./formatting`)\n};\nconst file$query = Symbol(`QueryFile.query`);\n/**\r\n * @class QueryFile\r\n * @description\r\n *\r\n * Represents an external SQL file. The type is available from the library's root: `pgp.QueryFile`.\r\n *\r\n * Reads a file with SQL and prepares it for execution, also parses and minifies it, if required.\r\n * The SQL can be of any complexity, with both single and multi-line comments.\r\n *\r\n * The type can be used in place of the `query` parameter, with any query method directly, plus as `text` in {@link PreparedStatement}\r\n * and {@link ParameterizedQuery}.\r\n *\r\n * It never throws any error, leaving it for query methods to reject with {@link errors.QueryFileError QueryFileError}.\r\n *\r\n * **IMPORTANT:** You should only create a single reusable object per file, in order to avoid repeated file reads,\r\n * as the IO is a very expensive resource. If you do not follow it, you will be seeing the following warning:\r\n * `Creating a duplicate QueryFile object for the same file`, which signals a bad-use pattern.\r\n *\r\n * @param {string} file\r\n * Path to the SQL file with the query, either absolute or relative to the application's entry point file.\r\n *\r\n * If there is any problem reading the file, it will be reported when executing the query.\r\n *\r\n * @param {QueryFile.Options} [options]\r\n * Set of configuration options, as documented by {@link QueryFile.Options}.\r\n *\r\n * @returns {QueryFile}\r\n *\r\n * @see\r\n * {@link errors.QueryFileError QueryFileError},\r\n * {@link QueryFile#toPostgres toPostgres}\r\n *\r\n * @example\r\n * // File sql.js\r\n *\r\n * // Proper way to organize an sql provider:\r\n * //\r\n * // - have all sql files for Users in ./sql/users\r\n * // - have all sql files for Products in ./sql/products\r\n * // - have your sql provider module as ./sql/index.js\r\n *\r\n * const {QueryFile} = require('pg-promise');\r\n * const {join: joinPath} = require('path');\r\n *\r\n * // Helper for linking to external query files:\r\n * function sql(file) {\r\n *     const fullPath = joinPath(__dirname, file); // generating full path;\r\n *     return new QueryFile(fullPath, {minify: true});\r\n * }\r\n *\r\n * module.exports = {\r\n *     // external queries for Users:\r\n *     users: {\r\n *         add: sql('users/create.sql'),\r\n *         search: sql('users/search.sql'),\r\n *         report: sql('users/report.sql'),\r\n *     },\r\n *     // external queries for Products:\r\n *     products: {\r\n *         add: sql('products/add.sql'),\r\n *         quote: sql('products/quote.sql'),\r\n *         search: sql('products/search.sql'),\r\n *     }\r\n * };\r\n *\r\n * @example\r\n * // Testing our SQL provider\r\n *\r\n * const db = require('./db'); // our database module;\r\n * const {users: sql} = require('./sql'); // sql for users;\r\n *\r\n * module.exports = {\r\n *     addUser: (name, age) => db.none(sql.add, [name, age]),\r\n *     findUser: name => db.any(sql.search, name)\r\n * };\r\n *\r\n */\n\nclass QueryFile extends InnerState {\n  constructor(file, options) {\n    let filePath = file;\n    options = assertOptions(options, {\n      debug: npm.utils.isDev(),\n      minify: options && options.compress && options.minify === undefined ? true : undefined,\n      compress: undefined,\n      params: undefined,\n      noWarnings: undefined\n    });\n\n    if (npm.utils.isText(filePath) && !npm.path.isAbsolute(filePath)) {\n      filePath = npm.path.join(npm.utils.startDir, filePath);\n    }\n\n    const {\n      usedPath\n    } = QueryFile.instance; // istanbul ignore next:\n\n    if (!options.noWarnings) {\n      if (filePath in usedPath) {\n        usedPath[filePath]++;\n        ColorConsole.warn(`WARNING: Creating a duplicate QueryFile object for the same file - \\n    ${filePath}\\n${npm.utils.getLocalStack(2, 3)}\\n`);\n      } else {\n        usedPath[filePath] = 0;\n      }\n    }\n\n    const _inner = {\n      file,\n      filePath,\n      options,\n      sql: undefined,\n      error: undefined,\n      ready: undefined,\n      modTime: undefined\n    };\n    super(_inner);\n    this.prepare();\n  }\n  /**\r\n   * Global instance of the file-path repository.\r\n   *\r\n   * @return {{usedPath: {}}}\r\n   */\n\n\n  static get instance() {\n    const s = Symbol.for(`pgPromiseQueryFile`);\n    let scope = global[s];\n\n    if (!scope) {\n      scope = {\n        usedPath: {} // used-path look-up dictionary\n\n      };\n      global[s] = scope;\n    }\n\n    return scope;\n  }\n  /**\r\n   * @name QueryFile#Symbol(QueryFile.$query)\r\n   * @type {string}\r\n   * @default undefined\r\n   * @readonly\r\n   * @private\r\n   * @summary Prepared query string.\r\n   * @description\r\n   * When property {@link QueryFile#error error} is set, the query is `undefined`.\r\n   *\r\n   * **IMPORTANT:** This property is for internal use by the library only, never use this\r\n   * property directly from your code.\r\n   */\n\n\n  get [file$query]() {\n    return this._inner.sql;\n  }\n  /**\r\n   * @name QueryFile#error\r\n   * @type {errors.QueryFileError}\r\n   * @default undefined\r\n   * @readonly\r\n   * @description\r\n   * When in an error state, it is set to a {@link errors.QueryFileError QueryFileError} object. Otherwise, it is `undefined`.\r\n   */\n\n\n  get error() {\n    return this._inner.error;\n  }\n  /**\r\n   * @name QueryFile#file\r\n   * @type {string}\r\n   * @readonly\r\n   * @description\r\n   * File name that was passed into the constructor.\r\n   *\r\n   * This property is primarily for internal use by the library.\r\n   */\n\n\n  get file() {\n    return this._inner.file;\n  }\n  /**\r\n   * @name QueryFile#options\r\n   * @type {QueryFile.Options}\r\n   * @readonly\r\n   * @description\r\n   * Set of options, as configured during the object's construction.\r\n   *\r\n   * This property is primarily for internal use by the library.\r\n   */\n\n\n  get options() {\n    return this._inner.options;\n  }\n  /**\r\n   * @summary Prepares the query for execution.\r\n   * @description\r\n   * If the query hasn't been prepared yet, it will read the file and process the content according\r\n   * to the parameters passed into the constructor.\r\n   *\r\n   * This method is primarily for internal use by the library.\r\n   *\r\n   * @param {boolean} [throwErrors=false]\r\n   * Throw any error encountered.\r\n   */\n\n\n  prepare(throwErrors) {\n    const _i = this._inner,\n          options = _i.options;\n    let lastMod;\n\n    if (options.debug && _i.ready) {\n      try {\n        lastMod = npm.fs.statSync(_i.filePath).mtime.getTime();\n\n        if (lastMod === _i.modTime) {\n          // istanbul ignore next;\n          // coverage for this works differently under Windows and Linux\n          return;\n        }\n\n        _i.ready = false;\n      } catch (e) {\n        _i.sql = undefined;\n        _i.ready = false;\n        _i.error = e;\n\n        if (throwErrors) {\n          throw _i.error;\n        }\n\n        return;\n      }\n    }\n\n    if (_i.ready) {\n      return;\n    }\n\n    try {\n      _i.sql = npm.fs.readFileSync(_i.filePath, `utf8`);\n      _i.modTime = lastMod || npm.fs.statSync(_i.filePath).mtime.getTime();\n\n      if (options.minify && options.minify !== `after`) {\n        _i.sql = npm.minify(_i.sql, {\n          compress: options.compress\n        });\n      }\n\n      if (options.params !== undefined) {\n        _i.sql = npm.formatting.as.format(_i.sql, options.params, {\n          partial: true\n        });\n      }\n\n      if (options.minify && options.minify === `after`) {\n        _i.sql = npm.minify(_i.sql, {\n          compress: options.compress\n        });\n      }\n\n      _i.ready = true;\n      _i.error = undefined;\n    } catch (e) {\n      _i.sql = undefined;\n      _i.error = new QueryFileError(e, this);\n\n      if (throwErrors) {\n        throw _i.error;\n      }\n    }\n  }\n\n} // Hiding the query as a symbol within the type,\n// to make it even more difficult to misuse it:\n\n\nQueryFile.$query = file$query;\n/**\r\n * @method QueryFile#toPostgres\r\n * @description\r\n * $[Custom Type Formatting], based on $[Symbolic CTF], i.e. the actual method is available only via {@link external:Symbol Symbol}:\r\n *\r\n * ```js\r\n * const ctf = pgp.as.ctf; // Custom Type Formatting symbols namespace\r\n * const query = qf[ctf.toPostgres](); // qf = an object of type QueryFile\r\n * ```\r\n *\r\n * This is a raw formatting type (`rawType = true`), i.e. when used as a query-formatting parameter, type `QueryFile` injects SQL as raw text.\r\n *\r\n * If you need to support type `QueryFile` outside of query methods, this is the only safe way to get the most current SQL.\r\n * And you would want to use this method dynamically, as it reloads the SQL automatically, if option `debug` is set.\r\n * See {@link QueryFile.Options Options}.\r\n *\r\n * @param {QueryFile} [self]\r\n * Optional self-reference, for ES6 arrow functions.\r\n *\r\n * @returns {string}\r\n * SQL string from the file, according to the {@link QueryFile.Options options} specified.\r\n *\r\n */\n\nQueryFile.prototype[npm.formatting.as.ctf.toPostgres] = function (self) {\n  self = this instanceof QueryFile && this || self;\n  self.prepare(true);\n  return self[QueryFile.$query];\n};\n\nQueryFile.prototype[npm.formatting.as.ctf.rawType] = true; // use as pre-formatted\n\n/**\r\n * @method QueryFile#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object's current state.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\n\nQueryFile.prototype.toString = function (level) {\n  level = level > 0 ? parseInt(level) : 0;\n  const gap = npm.utils.messageGap(level + 1);\n  const lines = [`QueryFile {`];\n  this.prepare();\n  lines.push(gap + `file: \"` + this.file + `\"`);\n  lines.push(gap + `options: ` + npm.utils.toJson(this.options));\n\n  if (this.error) {\n    lines.push(gap + `error: ` + this.error.toString(level + 1));\n  } else {\n    lines.push(gap + `query: \"` + this[QueryFile.$query] + `\"`);\n  }\n\n  lines.push(npm.utils.messageGap(level) + `}`);\n  return lines.join(npm.os.EOL);\n};\n\nnpm.utils.addInspection(QueryFile, function () {\n  return this.toString();\n});\nmodule.exports = {\n  QueryFile\n};\n/**\r\n * @typedef QueryFile.Options\r\n * @description\r\n * A set of configuration options as passed into the {@link QueryFile} constructor.\r\n *\r\n * @property {boolean} debug\r\n * When in debug mode, the query file is checked for its last modification time on every query request,\r\n * so if it changes, the file is read afresh.\r\n *\r\n * The default for this property is `true` when `NODE_ENV` = `development`,\r\n * or `false` otherwise.\r\n *\r\n * @property {boolean|string} minify=false\r\n * Parses and minifies the SQL using $[pg-minify]:\r\n * - `false` - do not use $[pg-minify]\r\n * - `true` - use $[pg-minify] to parse and minify SQL\r\n * - `'after'` - use $[pg-minify] after applying static formatting parameters\r\n *   (option `params`), as opposed to before it (default)\r\n *\r\n * If option `compress` is set, then the default for `minify` is `true`.\r\n *\r\n * Failure to parse SQL will result in $[SQLParsingError].\r\n *\r\n * @property {boolean} compress=false\r\n * Sets option `compress` as supported by $[pg-minify], to uglify the SQL:\r\n * - `false` - no compression to be applied, keep minimum spaces for easier read\r\n * - `true` - remove all unnecessary spaces from SQL\r\n *\r\n * This option has no meaning, if `minify` is explicitly set to `false`. However, if `minify` is not\r\n * specified and `compress` is specified as `true`, then `minify` defaults to `true`.\r\n *\r\n * @property {array|object|value} params\r\n *\r\n * Static formatting parameters to be applied to the SQL, using the same method {@link formatting.format as.format},\r\n * but with option `partial` = `true`.\r\n *\r\n * Most of the time query formatting is fully dynamic, and applied just before executing the query.\r\n * In some cases though you may need to pre-format SQL with static values. Examples of it can be a\r\n * schema name, or a configurable table name.\r\n *\r\n * This option makes two-step SQL formatting easy: you can pre-format the SQL initially, and then\r\n * apply the second-step dynamic formatting when executing the query.\r\n *\r\n * @property {boolean} noWarnings=false\r\n * Suppresses all warnings produced by the class. It is not recommended for general use, only in specific tests\r\n * that may require it.\r\n *\r\n */","map":{"version":3,"sources":["C:/Users/Vinson Chen/Desktop/DisclosedWebsite/node_modules/pg-promise/lib/query-file.js"],"names":["InnerState","require","QueryFileError","assertOptions","ColorConsole","npm","fs","os","path","minify","utils","formatting","file$query","Symbol","QueryFile","constructor","file","options","filePath","debug","isDev","compress","undefined","params","noWarnings","isText","isAbsolute","join","startDir","usedPath","instance","warn","getLocalStack","_inner","sql","error","ready","modTime","prepare","s","for","scope","global","throwErrors","_i","lastMod","statSync","mtime","getTime","e","readFileSync","as","format","partial","$query","prototype","ctf","toPostgres","self","rawType","toString","level","parseInt","gap","messageGap","lines","push","toJson","EOL","addInspection","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {InnerState} = require(`./inner-state`);\r\nconst {QueryFileError} = require(`./errors`);\r\nconst {assertOptions} = require(`assert-options`);\r\nconst {ColorConsole} = require(`./utils/color`);\r\n\r\nconst npm = {\r\n    fs: require(`fs`),\r\n    os: require(`os`),\r\n    path: require(`path`),\r\n    minify: require(`pg-minify`),\r\n    utils: require(`./utils`),\r\n    formatting: require(`./formatting`)\r\n};\r\n\r\nconst file$query = Symbol(`QueryFile.query`);\r\n\r\n/**\r\n * @class QueryFile\r\n * @description\r\n *\r\n * Represents an external SQL file. The type is available from the library's root: `pgp.QueryFile`.\r\n *\r\n * Reads a file with SQL and prepares it for execution, also parses and minifies it, if required.\r\n * The SQL can be of any complexity, with both single and multi-line comments.\r\n *\r\n * The type can be used in place of the `query` parameter, with any query method directly, plus as `text` in {@link PreparedStatement}\r\n * and {@link ParameterizedQuery}.\r\n *\r\n * It never throws any error, leaving it for query methods to reject with {@link errors.QueryFileError QueryFileError}.\r\n *\r\n * **IMPORTANT:** You should only create a single reusable object per file, in order to avoid repeated file reads,\r\n * as the IO is a very expensive resource. If you do not follow it, you will be seeing the following warning:\r\n * `Creating a duplicate QueryFile object for the same file`, which signals a bad-use pattern.\r\n *\r\n * @param {string} file\r\n * Path to the SQL file with the query, either absolute or relative to the application's entry point file.\r\n *\r\n * If there is any problem reading the file, it will be reported when executing the query.\r\n *\r\n * @param {QueryFile.Options} [options]\r\n * Set of configuration options, as documented by {@link QueryFile.Options}.\r\n *\r\n * @returns {QueryFile}\r\n *\r\n * @see\r\n * {@link errors.QueryFileError QueryFileError},\r\n * {@link QueryFile#toPostgres toPostgres}\r\n *\r\n * @example\r\n * // File sql.js\r\n *\r\n * // Proper way to organize an sql provider:\r\n * //\r\n * // - have all sql files for Users in ./sql/users\r\n * // - have all sql files for Products in ./sql/products\r\n * // - have your sql provider module as ./sql/index.js\r\n *\r\n * const {QueryFile} = require('pg-promise');\r\n * const {join: joinPath} = require('path');\r\n *\r\n * // Helper for linking to external query files:\r\n * function sql(file) {\r\n *     const fullPath = joinPath(__dirname, file); // generating full path;\r\n *     return new QueryFile(fullPath, {minify: true});\r\n * }\r\n *\r\n * module.exports = {\r\n *     // external queries for Users:\r\n *     users: {\r\n *         add: sql('users/create.sql'),\r\n *         search: sql('users/search.sql'),\r\n *         report: sql('users/report.sql'),\r\n *     },\r\n *     // external queries for Products:\r\n *     products: {\r\n *         add: sql('products/add.sql'),\r\n *         quote: sql('products/quote.sql'),\r\n *         search: sql('products/search.sql'),\r\n *     }\r\n * };\r\n *\r\n * @example\r\n * // Testing our SQL provider\r\n *\r\n * const db = require('./db'); // our database module;\r\n * const {users: sql} = require('./sql'); // sql for users;\r\n *\r\n * module.exports = {\r\n *     addUser: (name, age) => db.none(sql.add, [name, age]),\r\n *     findUser: name => db.any(sql.search, name)\r\n * };\r\n *\r\n */\r\nclass QueryFile extends InnerState {\r\n\r\n    constructor(file, options) {\r\n\r\n        let filePath = file;\r\n\r\n        options = assertOptions(options, {\r\n            debug: npm.utils.isDev(),\r\n            minify: (options && options.compress && options.minify === undefined) ? true : undefined,\r\n            compress: undefined,\r\n            params: undefined,\r\n            noWarnings: undefined\r\n        });\r\n\r\n        if (npm.utils.isText(filePath) && !npm.path.isAbsolute(filePath)) {\r\n            filePath = npm.path.join(npm.utils.startDir, filePath);\r\n        }\r\n\r\n        const {usedPath} = QueryFile.instance;\r\n\r\n        // istanbul ignore next:\r\n        if (!options.noWarnings) {\r\n            if (filePath in usedPath) {\r\n                usedPath[filePath]++;\r\n                ColorConsole.warn(`WARNING: Creating a duplicate QueryFile object for the same file - \\n    ${filePath}\\n${npm.utils.getLocalStack(2, 3)}\\n`);\r\n            } else {\r\n                usedPath[filePath] = 0;\r\n            }\r\n        }\r\n\r\n        const _inner = {\r\n            file,\r\n            filePath,\r\n            options,\r\n            sql: undefined,\r\n            error: undefined,\r\n            ready: undefined,\r\n            modTime: undefined\r\n        };\r\n\r\n        super(_inner);\r\n\r\n        this.prepare();\r\n    }\r\n\r\n    /**\r\n     * Global instance of the file-path repository.\r\n     *\r\n     * @return {{usedPath: {}}}\r\n     */\r\n    static get instance() {\r\n        const s = Symbol.for(`pgPromiseQueryFile`);\r\n        let scope = global[s];\r\n        if (!scope) {\r\n            scope = {\r\n                usedPath: {} // used-path look-up dictionary\r\n            };\r\n            global[s] = scope;\r\n        }\r\n        return scope;\r\n    }\r\n\r\n    /**\r\n     * @name QueryFile#Symbol(QueryFile.$query)\r\n     * @type {string}\r\n     * @default undefined\r\n     * @readonly\r\n     * @private\r\n     * @summary Prepared query string.\r\n     * @description\r\n     * When property {@link QueryFile#error error} is set, the query is `undefined`.\r\n     *\r\n     * **IMPORTANT:** This property is for internal use by the library only, never use this\r\n     * property directly from your code.\r\n     */\r\n    get [file$query]() {\r\n        return this._inner.sql;\r\n    }\r\n\r\n    /**\r\n     * @name QueryFile#error\r\n     * @type {errors.QueryFileError}\r\n     * @default undefined\r\n     * @readonly\r\n     * @description\r\n     * When in an error state, it is set to a {@link errors.QueryFileError QueryFileError} object. Otherwise, it is `undefined`.\r\n     */\r\n    get error() {\r\n        return this._inner.error;\r\n    }\r\n\r\n    /**\r\n     * @name QueryFile#file\r\n     * @type {string}\r\n     * @readonly\r\n     * @description\r\n     * File name that was passed into the constructor.\r\n     *\r\n     * This property is primarily for internal use by the library.\r\n     */\r\n    get file() {\r\n        return this._inner.file;\r\n    }\r\n\r\n    /**\r\n     * @name QueryFile#options\r\n     * @type {QueryFile.Options}\r\n     * @readonly\r\n     * @description\r\n     * Set of options, as configured during the object's construction.\r\n     *\r\n     * This property is primarily for internal use by the library.\r\n     */\r\n    get options() {\r\n        return this._inner.options;\r\n    }\r\n\r\n    /**\r\n     * @summary Prepares the query for execution.\r\n     * @description\r\n     * If the query hasn't been prepared yet, it will read the file and process the content according\r\n     * to the parameters passed into the constructor.\r\n     *\r\n     * This method is primarily for internal use by the library.\r\n     *\r\n     * @param {boolean} [throwErrors=false]\r\n     * Throw any error encountered.\r\n     */\r\n    prepare(throwErrors) {\r\n        const _i = this._inner, options = _i.options;\r\n        let lastMod;\r\n        if (options.debug && _i.ready) {\r\n            try {\r\n                lastMod = npm.fs.statSync(_i.filePath).mtime.getTime();\r\n                if (lastMod === _i.modTime) {\r\n                    // istanbul ignore next;\r\n                    // coverage for this works differently under Windows and Linux\r\n                    return;\r\n                }\r\n                _i.ready = false;\r\n            } catch (e) {\r\n                _i.sql = undefined;\r\n                _i.ready = false;\r\n                _i.error = e;\r\n                if (throwErrors) {\r\n                    throw _i.error;\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        if (_i.ready) {\r\n            return;\r\n        }\r\n        try {\r\n            _i.sql = npm.fs.readFileSync(_i.filePath, `utf8`);\r\n            _i.modTime = lastMod || npm.fs.statSync(_i.filePath).mtime.getTime();\r\n            if (options.minify && options.minify !== `after`) {\r\n                _i.sql = npm.minify(_i.sql, {compress: options.compress});\r\n            }\r\n            if (options.params !== undefined) {\r\n                _i.sql = npm.formatting.as.format(_i.sql, options.params, {partial: true});\r\n            }\r\n            if (options.minify && options.minify === `after`) {\r\n                _i.sql = npm.minify(_i.sql, {compress: options.compress});\r\n            }\r\n            _i.ready = true;\r\n            _i.error = undefined;\r\n        } catch (e) {\r\n            _i.sql = undefined;\r\n            _i.error = new QueryFileError(e, this);\r\n            if (throwErrors) {\r\n                throw _i.error;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// Hiding the query as a symbol within the type,\r\n// to make it even more difficult to misuse it:\r\nQueryFile.$query = file$query;\r\n\r\n/**\r\n * @method QueryFile#toPostgres\r\n * @description\r\n * $[Custom Type Formatting], based on $[Symbolic CTF], i.e. the actual method is available only via {@link external:Symbol Symbol}:\r\n *\r\n * ```js\r\n * const ctf = pgp.as.ctf; // Custom Type Formatting symbols namespace\r\n * const query = qf[ctf.toPostgres](); // qf = an object of type QueryFile\r\n * ```\r\n *\r\n * This is a raw formatting type (`rawType = true`), i.e. when used as a query-formatting parameter, type `QueryFile` injects SQL as raw text.\r\n *\r\n * If you need to support type `QueryFile` outside of query methods, this is the only safe way to get the most current SQL.\r\n * And you would want to use this method dynamically, as it reloads the SQL automatically, if option `debug` is set.\r\n * See {@link QueryFile.Options Options}.\r\n *\r\n * @param {QueryFile} [self]\r\n * Optional self-reference, for ES6 arrow functions.\r\n *\r\n * @returns {string}\r\n * SQL string from the file, according to the {@link QueryFile.Options options} specified.\r\n *\r\n */\r\nQueryFile.prototype[npm.formatting.as.ctf.toPostgres] = function (self) {\r\n    self = this instanceof QueryFile && this || self;\r\n    self.prepare(true);\r\n    return self[QueryFile.$query];\r\n};\r\n\r\nQueryFile.prototype[npm.formatting.as.ctf.rawType] = true; // use as pre-formatted\r\n\r\n/**\r\n * @method QueryFile#toString\r\n * @description\r\n * Creates a well-formatted multi-line string that represents the object's current state.\r\n *\r\n * It is called automatically when writing the object into the console.\r\n *\r\n * @param {number} [level=0]\r\n * Nested output level, to provide visual offset.\r\n *\r\n * @returns {string}\r\n */\r\nQueryFile.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap = npm.utils.messageGap(level + 1);\r\n    const lines = [\r\n        `QueryFile {`\r\n    ];\r\n    this.prepare();\r\n    lines.push(gap + `file: \"` + this.file + `\"`);\r\n    lines.push(gap + `options: ` + npm.utils.toJson(this.options));\r\n    if (this.error) {\r\n        lines.push(gap + `error: ` + this.error.toString(level + 1));\r\n    } else {\r\n        lines.push(gap + `query: \"` + this[QueryFile.$query] + `\"`);\r\n    }\r\n    lines.push(npm.utils.messageGap(level) + `}`);\r\n    return lines.join(npm.os.EOL);\r\n};\r\n\r\nnpm.utils.addInspection(QueryFile, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {QueryFile};\r\n\r\n/**\r\n * @typedef QueryFile.Options\r\n * @description\r\n * A set of configuration options as passed into the {@link QueryFile} constructor.\r\n *\r\n * @property {boolean} debug\r\n * When in debug mode, the query file is checked for its last modification time on every query request,\r\n * so if it changes, the file is read afresh.\r\n *\r\n * The default for this property is `true` when `NODE_ENV` = `development`,\r\n * or `false` otherwise.\r\n *\r\n * @property {boolean|string} minify=false\r\n * Parses and minifies the SQL using $[pg-minify]:\r\n * - `false` - do not use $[pg-minify]\r\n * - `true` - use $[pg-minify] to parse and minify SQL\r\n * - `'after'` - use $[pg-minify] after applying static formatting parameters\r\n *   (option `params`), as opposed to before it (default)\r\n *\r\n * If option `compress` is set, then the default for `minify` is `true`.\r\n *\r\n * Failure to parse SQL will result in $[SQLParsingError].\r\n *\r\n * @property {boolean} compress=false\r\n * Sets option `compress` as supported by $[pg-minify], to uglify the SQL:\r\n * - `false` - no compression to be applied, keep minimum spaces for easier read\r\n * - `true` - remove all unnecessary spaces from SQL\r\n *\r\n * This option has no meaning, if `minify` is explicitly set to `false`. However, if `minify` is not\r\n * specified and `compress` is specified as `true`, then `minify` defaults to `true`.\r\n *\r\n * @property {array|object|value} params\r\n *\r\n * Static formatting parameters to be applied to the SQL, using the same method {@link formatting.format as.format},\r\n * but with option `partial` = `true`.\r\n *\r\n * Most of the time query formatting is fully dynamic, and applied just before executing the query.\r\n * In some cases though you may need to pre-format SQL with static values. Examples of it can be a\r\n * schema name, or a configurable table name.\r\n *\r\n * This option makes two-step SQL formatting easy: you can pre-format the SQL initially, and then\r\n * apply the second-step dynamic formatting when executing the query.\r\n *\r\n * @property {boolean} noWarnings=false\r\n * Suppresses all warnings produced by the class. It is not recommended for general use, only in specific tests\r\n * that may require it.\r\n *\r\n */\r\n"]},"metadata":{},"sourceType":"script"}