{"ast":null,"code":"const {\n  EOL\n} = require('os');\n\nconst {\n  addInspection,\n  messageGap\n} = require('./utils');\n\nconst parsingErrorCode = {\n  unclosedMLC: 0,\n  // Unclosed multi-line comment.\n  unclosedText: 1,\n  // Unclosed text block.\n  unclosedQI: 2,\n  // Unclosed quoted identifier.\n  multiLineQI: 3 // Multi-line quoted identifiers are not supported.\n\n};\nObject.freeze(parsingErrorCode);\nconst errorMessages = [{\n  name: 'unclosedMLC',\n  message: 'Unclosed multi-line comment.'\n}, {\n  name: 'unclosedText',\n  message: 'Unclosed text block.'\n}, {\n  name: 'unclosedQI',\n  message: 'Unclosed quoted identifier.'\n}, {\n  name: 'multiLineQI',\n  message: 'Multi-line quoted identifiers are not supported.'\n}];\n\nclass SQLParsingError extends Error {\n  constructor(code, position) {\n    const err = errorMessages[code].message;\n    const message = `Error parsing SQL at {line:${position.line},col:${position.column}}: ${err}`;\n    super(message);\n    this.name = this.constructor.name;\n    this.error = err;\n    this.code = code;\n    this.position = position;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nSQLParsingError.prototype.toString = function (level) {\n  level = level > 0 ? parseInt(level) : 0;\n  const gap = messageGap(level + 1);\n  const lines = [`SQLParsingError {`, `${gap}code: parsingErrorCode.${errorMessages[this.code].name}`, `${gap}error: \"${this.error}\"`, `${gap}position: {line: ${this.position.line}, col: ${this.position.column}}`, `${messageGap(level)}}`];\n  return lines.join(EOL);\n};\n\naddInspection(SQLParsingError.prototype, function () {\n  return this.toString();\n});\nmodule.exports = {\n  SQLParsingError,\n  parsingErrorCode\n};","map":{"version":3,"sources":["C:/Users/Vinson Chen/Desktop/DisclosedWebsite/node_modules/pg-minify/lib/error.js"],"names":["EOL","require","addInspection","messageGap","parsingErrorCode","unclosedMLC","unclosedText","unclosedQI","multiLineQI","Object","freeze","errorMessages","name","message","SQLParsingError","Error","constructor","code","position","err","line","column","error","captureStackTrace","prototype","toString","level","parseInt","gap","lines","join","module","exports"],"mappings":"AAAA,MAAM;AAACA,EAAAA;AAAD,IAAQC,OAAO,CAAC,IAAD,CAArB;;AACA,MAAM;AAACC,EAAAA,aAAD;AAAgBC,EAAAA;AAAhB,IAA8BF,OAAO,CAAC,SAAD,CAA3C;;AAEA,MAAMG,gBAAgB,GAAG;AACrBC,EAAAA,WAAW,EAAE,CADQ;AACL;AAChBC,EAAAA,YAAY,EAAE,CAFO;AAEJ;AACjBC,EAAAA,UAAU,EAAE,CAHS;AAGN;AACfC,EAAAA,WAAW,EAAE,CAJQ,CAIN;;AAJM,CAAzB;AAOAC,MAAM,CAACC,MAAP,CAAcN,gBAAd;AAEA,MAAMO,aAAa,GAAG,CAClB;AAACC,EAAAA,IAAI,EAAE,aAAP;AAAsBC,EAAAA,OAAO,EAAE;AAA/B,CADkB,EAElB;AAACD,EAAAA,IAAI,EAAE,cAAP;AAAuBC,EAAAA,OAAO,EAAE;AAAhC,CAFkB,EAGlB;AAACD,EAAAA,IAAI,EAAE,YAAP;AAAqBC,EAAAA,OAAO,EAAE;AAA9B,CAHkB,EAIlB;AAACD,EAAAA,IAAI,EAAE,aAAP;AAAsBC,EAAAA,OAAO,EAAE;AAA/B,CAJkB,CAAtB;;AAOA,MAAMC,eAAN,SAA8BC,KAA9B,CAAoC;AAChCC,EAAAA,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiB;AACxB,UAAMC,GAAG,GAAGR,aAAa,CAACM,IAAD,CAAb,CAAoBJ,OAAhC;AACA,UAAMA,OAAO,GAAI,8BAA6BK,QAAQ,CAACE,IAAK,QAAOF,QAAQ,CAACG,MAAO,MAAKF,GAAI,EAA5F;AACA,UAAMN,OAAN;AACA,SAAKD,IAAL,GAAY,KAAKI,WAAL,CAAiBJ,IAA7B;AACA,SAAKU,KAAL,GAAaH,GAAb;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACAH,IAAAA,KAAK,CAACQ,iBAAN,CAAwB,IAAxB,EAA8B,KAAKP,WAAnC;AACH;;AAV+B;;AAapCF,eAAe,CAACU,SAAhB,CAA0BC,QAA1B,GAAqC,UAAUC,KAAV,EAAiB;AAClDA,EAAAA,KAAK,GAAGA,KAAK,GAAG,CAAR,GAAYC,QAAQ,CAACD,KAAD,CAApB,GAA8B,CAAtC;AACA,QAAME,GAAG,GAAGzB,UAAU,CAACuB,KAAK,GAAG,CAAT,CAAtB;AACA,QAAMG,KAAK,GAAG,CACT,mBADS,EAET,GAAED,GAAI,0BAAyBjB,aAAa,CAAC,KAAKM,IAAN,CAAb,CAAyBL,IAAK,EAFpD,EAGT,GAAEgB,GAAI,WAAU,KAAKN,KAAM,GAHlB,EAIT,GAAEM,GAAI,oBAAmB,KAAKV,QAAL,CAAcE,IAAK,UAAS,KAAKF,QAAL,CAAcG,MAAO,GAJjE,EAKT,GAAElB,UAAU,CAACuB,KAAD,CAAQ,GALX,CAAd;AAOA,SAAOG,KAAK,CAACC,IAAN,CAAW9B,GAAX,CAAP;AACH,CAXD;;AAaAE,aAAa,CAACY,eAAe,CAACU,SAAjB,EAA4B,YAAY;AACjD,SAAO,KAAKC,QAAL,EAAP;AACH,CAFY,CAAb;AAIAM,MAAM,CAACC,OAAP,GAAiB;AACblB,EAAAA,eADa;AAEbV,EAAAA;AAFa,CAAjB","sourcesContent":["const {EOL} = require('os');\r\nconst {addInspection, messageGap} = require('./utils');\r\n\r\nconst parsingErrorCode = {\r\n    unclosedMLC: 0, // Unclosed multi-line comment.\r\n    unclosedText: 1, // Unclosed text block.\r\n    unclosedQI: 2, // Unclosed quoted identifier.\r\n    multiLineQI: 3 // Multi-line quoted identifiers are not supported.\r\n};\r\n\r\nObject.freeze(parsingErrorCode);\r\n\r\nconst errorMessages = [\r\n    {name: 'unclosedMLC', message: 'Unclosed multi-line comment.'},\r\n    {name: 'unclosedText', message: 'Unclosed text block.'},\r\n    {name: 'unclosedQI', message: 'Unclosed quoted identifier.'},\r\n    {name: 'multiLineQI', message: 'Multi-line quoted identifiers are not supported.'}\r\n];\r\n\r\nclass SQLParsingError extends Error {\r\n    constructor(code, position) {\r\n        const err = errorMessages[code].message;\r\n        const message = `Error parsing SQL at {line:${position.line},col:${position.column}}: ${err}`;\r\n        super(message);\r\n        this.name = this.constructor.name;\r\n        this.error = err;\r\n        this.code = code;\r\n        this.position = position;\r\n        Error.captureStackTrace(this, this.constructor);\r\n    }\r\n}\r\n\r\nSQLParsingError.prototype.toString = function (level) {\r\n    level = level > 0 ? parseInt(level) : 0;\r\n    const gap = messageGap(level + 1);\r\n    const lines = [\r\n        `SQLParsingError {`,\r\n        `${gap}code: parsingErrorCode.${errorMessages[this.code].name}`,\r\n        `${gap}error: \"${this.error}\"`,\r\n        `${gap}position: {line: ${this.position.line}, col: ${this.position.column}}`,\r\n        `${messageGap(level)}}`\r\n    ];\r\n    return lines.join(EOL);\r\n};\r\n\r\naddInspection(SQLParsingError.prototype, function () {\r\n    return this.toString();\r\n});\r\n\r\nmodule.exports = {\r\n    SQLParsingError,\r\n    parsingErrorCode\r\n};\r\n"]},"metadata":{},"sourceType":"script"}