{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\nconst {\n  ColorConsole\n} = require(`./utils/color`);\n\nconst npm = {\n  utils: require(`./utils`)\n};\n/**\r\n * @class DatabasePool\r\n * @static\r\n * @private\r\n */\n\nclass DatabasePool {\n  /**\r\n   * Global instance of the database pool repository.\r\n   *\r\n   * @returns {{dbMap: {}, dbs: Array}}\r\n   */\n  static get instance() {\n    const s = Symbol.for(`pgPromiseDatabasePool`);\n    let scope = global[s];\n\n    if (!scope) {\n      scope = {\n        dbMap: {},\n        // map of used database context keys (connection + dc)\n        dbs: [] // all database objects\n\n      };\n      global[s] = scope;\n    }\n\n    return scope;\n  }\n  /**\r\n   * @method DatabasePool.register\r\n   * @static\r\n   * @description\r\n   *  - Registers each database object, to make sure no duplicates connections are used,\r\n   *    and if they are, produce a warning;\r\n   *  - Registers each Pool object, to be able to release them all when requested.\r\n   *\r\n   * @param {Database} db - The new Database object being registered.\r\n   */\n\n\n  static register(db) {\n    const cnKey = DatabasePool.createContextKey(db);\n    npm.utils.addReadProp(db, `$cnKey`, cnKey, true);\n    const {\n      dbMap,\n      dbs\n    } = DatabasePool.instance;\n\n    if (cnKey in dbMap) {\n      dbMap[cnKey]++;\n      /* istanbul ignore if */\n\n      if (!db.$config.options.noWarnings) {\n        ColorConsole.warn(`WARNING: Creating a duplicate database object for the same connection.\\n${npm.utils.getLocalStack(4, 3)}\\n`);\n      }\n    } else {\n      dbMap[cnKey] = 1;\n    }\n\n    dbs.push(db);\n  }\n  /**\r\n   * @method DatabasePool.unregister\r\n   * @static\r\n   * @param db\r\n   */\n\n\n  static unregister(db) {\n    const cnKey = db.$cnKey;\n    const {\n      dbMap\n    } = DatabasePool.instance;\n\n    if (! --dbMap[cnKey]) {\n      delete dbMap[cnKey];\n    }\n  }\n  /**\r\n   * @method DatabasePool.shutDown\r\n   * @static\r\n   */\n\n\n  static shutDown() {\n    const {\n      instance\n    } = DatabasePool;\n    instance.dbs.forEach(db => {\n      db.$destroy();\n    });\n    instance.dbs.length = 0;\n    instance.dbMap = {};\n  }\n  /**\r\n   * @method DatabasePool.createContextKey\r\n   * @static\r\n   * @description\r\n   * For connections that are objects it reorders the keys alphabetically,\r\n   * and then serializes the result into a JSON string.\r\n   *\r\n   * @param {Database} db - Database instance.\r\n   */\n\n\n  static createContextKey(db) {\n    let cn = db.$cn;\n\n    if (typeof cn === `object`) {\n      const obj = {},\n            keys = Object.keys(cn).sort();\n      keys.forEach(name => {\n        obj[name] = cn[name];\n      });\n      cn = obj;\n    }\n\n    return npm.utils.toJson(npm.utils.getSafeConnection(cn)) + npm.utils.toJson(db.$dc);\n  }\n\n}\n\nmodule.exports = {\n  DatabasePool\n};","map":{"version":3,"sources":["C:/Users/Vinson Chen/Desktop/DisclosedWebsite/node_modules/pg-promise/lib/database-pool.js"],"names":["ColorConsole","require","npm","utils","DatabasePool","instance","s","Symbol","for","scope","global","dbMap","dbs","register","db","cnKey","createContextKey","addReadProp","$config","options","noWarnings","warn","getLocalStack","push","unregister","$cnKey","shutDown","forEach","$destroy","length","cn","$cn","obj","keys","Object","sort","name","toJson","getSafeConnection","$dc","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\nconst {ColorConsole} = require(`./utils/color`);\r\n\r\nconst npm = {\r\n    utils: require(`./utils`)\r\n};\r\n\r\n/**\r\n * @class DatabasePool\r\n * @static\r\n * @private\r\n */\r\nclass DatabasePool {\r\n\r\n    /**\r\n     * Global instance of the database pool repository.\r\n     *\r\n     * @returns {{dbMap: {}, dbs: Array}}\r\n     */\r\n    static get instance() {\r\n        const s = Symbol.for(`pgPromiseDatabasePool`);\r\n        let scope = global[s];\r\n        if (!scope) {\r\n            scope = {\r\n                dbMap: {}, // map of used database context keys (connection + dc)\r\n                dbs: [] // all database objects\r\n            };\r\n            global[s] = scope;\r\n        }\r\n        return scope;\r\n    }\r\n\r\n    /**\r\n     * @method DatabasePool.register\r\n     * @static\r\n     * @description\r\n     *  - Registers each database object, to make sure no duplicates connections are used,\r\n     *    and if they are, produce a warning;\r\n     *  - Registers each Pool object, to be able to release them all when requested.\r\n     *\r\n     * @param {Database} db - The new Database object being registered.\r\n     */\r\n    static register(db) {\r\n        const cnKey = DatabasePool.createContextKey(db);\r\n        npm.utils.addReadProp(db, `$cnKey`, cnKey, true);\r\n        const {dbMap, dbs} = DatabasePool.instance;\r\n        if (cnKey in dbMap) {\r\n            dbMap[cnKey]++;\r\n            /* istanbul ignore if */\r\n            if (!db.$config.options.noWarnings) {\r\n                ColorConsole.warn(`WARNING: Creating a duplicate database object for the same connection.\\n${npm.utils.getLocalStack(4, 3)}\\n`);\r\n            }\r\n        } else {\r\n            dbMap[cnKey] = 1;\r\n        }\r\n        dbs.push(db);\r\n    }\r\n\r\n    /**\r\n     * @method DatabasePool.unregister\r\n     * @static\r\n     * @param db\r\n     */\r\n    static unregister(db) {\r\n        const cnKey = db.$cnKey;\r\n        const {dbMap} = DatabasePool.instance;\r\n        if (!--dbMap[cnKey]) {\r\n            delete dbMap[cnKey];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @method DatabasePool.shutDown\r\n     * @static\r\n     */\r\n    static shutDown() {\r\n        const {instance} = DatabasePool;\r\n        instance.dbs.forEach(db => {\r\n            db.$destroy();\r\n        });\r\n        instance.dbs.length = 0;\r\n        instance.dbMap = {};\r\n    }\r\n\r\n    /**\r\n     * @method DatabasePool.createContextKey\r\n     * @static\r\n     * @description\r\n     * For connections that are objects it reorders the keys alphabetically,\r\n     * and then serializes the result into a JSON string.\r\n     *\r\n     * @param {Database} db - Database instance.\r\n     */\r\n    static createContextKey(db) {\r\n        let cn = db.$cn;\r\n        if (typeof cn === `object`) {\r\n            const obj = {}, keys = Object.keys(cn).sort();\r\n            keys.forEach(name => {\r\n                obj[name] = cn[name];\r\n            });\r\n            cn = obj;\r\n        }\r\n        return npm.utils.toJson(npm.utils.getSafeConnection(cn)) + npm.utils.toJson(db.$dc);\r\n    }\r\n}\r\n\r\nmodule.exports = {DatabasePool};\r\n"]},"metadata":{},"sourceType":"script"}