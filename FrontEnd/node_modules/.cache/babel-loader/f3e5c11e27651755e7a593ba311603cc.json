{"ast":null,"code":"/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\n\n/**\r\n * @class ConnectionContext\r\n * @private\r\n * @summary Internal connection context.\r\n *\r\n * @param {object} cc\r\n * Connection Context.\r\n *\r\n * @param {object} cc.cn\r\n * Connection details\r\n *\r\n * @param {*} cc.dc\r\n * Database Context\r\n *\r\n * @param {object} cc.options\r\n * Library's Initialization Options\r\n *\r\n * @param {object} cc.db\r\n * Database Session we're attached to, if any.\r\n *\r\n * @param {number} cc.level\r\n * Task Level\r\n *\r\n * @param {number} cc.txLevel\r\n * Transaction Level\r\n *\r\n * @param {object} cc.parentCtx\r\n * Connection Context of the parent operation, if any.\r\n *\r\n */\nclass ConnectionContext {\n  constructor(cc) {\n    this.cn = cc.cn; // connection details;\n\n    this.dc = cc.dc; // database context;\n\n    this.options = cc.options; // library options;\n\n    this.db = cc.db; // database session;\n\n    this.level = cc.level; // task level;\n\n    this.txLevel = cc.txLevel; // transaction level;\n\n    this.parentCtx = null; // parent context\n\n    this.taskCtx = null; // task context\n\n    this.start = null; // Date/Time when connected\n\n    this.txCount = 0;\n  }\n\n  connect(db) {\n    this.db = db;\n    this.start = new Date();\n  }\n\n  disconnect(kill) {\n    if (this.db) {\n      const p = this.db.release(kill);\n      this.db = null;\n      return p;\n    }\n  }\n\n  clone() {\n    const obj = new ConnectionContext(this);\n    obj.parent = this;\n    obj.parentCtx = this.taskCtx;\n    return obj;\n  }\n\n  get nextTxCount() {\n    let txCurrent = this,\n        txTop = this;\n\n    while (txCurrent.parent) {\n      txCurrent = txCurrent.parent;\n\n      if (txCurrent.taskCtx && txCurrent.taskCtx.isTX) {\n        txTop = txCurrent;\n      }\n    }\n\n    return txTop.txCount++;\n  }\n\n}\n/**\r\n * Connection Context\r\n * @module context\r\n * @author Vitaly Tomilov\r\n * @private\r\n */\n\n\nmodule.exports = {\n  ConnectionContext\n};","map":{"version":3,"sources":["C:/Users/Vinson Chen/Desktop/DisclosedWebsite/node_modules/pg-promise/lib/context.js"],"names":["ConnectionContext","constructor","cc","cn","dc","options","db","level","txLevel","parentCtx","taskCtx","start","txCount","connect","Date","disconnect","kill","p","release","clone","obj","parent","nextTxCount","txCurrent","txTop","isTX","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,iBAAN,CAAwB;AAEpBC,EAAAA,WAAW,CAACC,EAAD,EAAK;AACZ,SAAKC,EAAL,GAAUD,EAAE,CAACC,EAAb,CADY,CACK;;AACjB,SAAKC,EAAL,GAAUF,EAAE,CAACE,EAAb,CAFY,CAEK;;AACjB,SAAKC,OAAL,GAAeH,EAAE,CAACG,OAAlB,CAHY,CAGe;;AAC3B,SAAKC,EAAL,GAAUJ,EAAE,CAACI,EAAb,CAJY,CAIK;;AACjB,SAAKC,KAAL,GAAaL,EAAE,CAACK,KAAhB,CALY,CAKW;;AACvB,SAAKC,OAAL,GAAeN,EAAE,CAACM,OAAlB,CANY,CAMe;;AAC3B,SAAKC,SAAL,GAAiB,IAAjB,CAPY,CAOW;;AACvB,SAAKC,OAAL,GAAe,IAAf,CARY,CAQS;;AACrB,SAAKC,KAAL,GAAa,IAAb,CATY,CASO;;AACnB,SAAKC,OAAL,GAAe,CAAf;AACH;;AAEDC,EAAAA,OAAO,CAACP,EAAD,EAAK;AACR,SAAKA,EAAL,GAAUA,EAAV;AACA,SAAKK,KAAL,GAAa,IAAIG,IAAJ,EAAb;AACH;;AAEDC,EAAAA,UAAU,CAACC,IAAD,EAAO;AACb,QAAI,KAAKV,EAAT,EAAa;AACT,YAAMW,CAAC,GAAG,KAAKX,EAAL,CAAQY,OAAR,CAAgBF,IAAhB,CAAV;AACA,WAAKV,EAAL,GAAU,IAAV;AACA,aAAOW,CAAP;AACH;AACJ;;AAEDE,EAAAA,KAAK,GAAG;AACJ,UAAMC,GAAG,GAAG,IAAIpB,iBAAJ,CAAsB,IAAtB,CAAZ;AACAoB,IAAAA,GAAG,CAACC,MAAJ,GAAa,IAAb;AACAD,IAAAA,GAAG,CAACX,SAAJ,GAAgB,KAAKC,OAArB;AACA,WAAOU,GAAP;AACH;;AAEc,MAAXE,WAAW,GAAG;AACd,QAAIC,SAAS,GAAG,IAAhB;AAAA,QAAsBC,KAAK,GAAG,IAA9B;;AACA,WAAOD,SAAS,CAACF,MAAjB,EAAyB;AACrBE,MAAAA,SAAS,GAAGA,SAAS,CAACF,MAAtB;;AACA,UAAIE,SAAS,CAACb,OAAV,IAAqBa,SAAS,CAACb,OAAV,CAAkBe,IAA3C,EAAiD;AAC7CD,QAAAA,KAAK,GAAGD,SAAR;AACH;AACJ;;AACD,WAAOC,KAAK,CAACZ,OAAN,EAAP;AACH;;AA5CmB;AA+CxB;AACA;AACA;AACA;AACA;AACA;;;AACAc,MAAM,CAACC,OAAP,GAAiB;AAAC3B,EAAAA;AAAD,CAAjB","sourcesContent":["/*\r\n * Copyright (c) 2015-present, Vitaly Tomilov\r\n *\r\n * See the LICENSE file at the top-level directory of this distribution\r\n * for licensing information.\r\n *\r\n * Removal or modification of this copyright notice is prohibited.\r\n */\r\n\r\n/**\r\n * @class ConnectionContext\r\n * @private\r\n * @summary Internal connection context.\r\n *\r\n * @param {object} cc\r\n * Connection Context.\r\n *\r\n * @param {object} cc.cn\r\n * Connection details\r\n *\r\n * @param {*} cc.dc\r\n * Database Context\r\n *\r\n * @param {object} cc.options\r\n * Library's Initialization Options\r\n *\r\n * @param {object} cc.db\r\n * Database Session we're attached to, if any.\r\n *\r\n * @param {number} cc.level\r\n * Task Level\r\n *\r\n * @param {number} cc.txLevel\r\n * Transaction Level\r\n *\r\n * @param {object} cc.parentCtx\r\n * Connection Context of the parent operation, if any.\r\n *\r\n */\r\nclass ConnectionContext {\r\n\r\n    constructor(cc) {\r\n        this.cn = cc.cn; // connection details;\r\n        this.dc = cc.dc; // database context;\r\n        this.options = cc.options; // library options;\r\n        this.db = cc.db; // database session;\r\n        this.level = cc.level; // task level;\r\n        this.txLevel = cc.txLevel; // transaction level;\r\n        this.parentCtx = null; // parent context\r\n        this.taskCtx = null; // task context\r\n        this.start = null; // Date/Time when connected\r\n        this.txCount = 0;\r\n    }\r\n\r\n    connect(db) {\r\n        this.db = db;\r\n        this.start = new Date();\r\n    }\r\n\r\n    disconnect(kill) {\r\n        if (this.db) {\r\n            const p = this.db.release(kill);\r\n            this.db = null;\r\n            return p;\r\n        }\r\n    }\r\n\r\n    clone() {\r\n        const obj = new ConnectionContext(this);\r\n        obj.parent = this;\r\n        obj.parentCtx = this.taskCtx;\r\n        return obj;\r\n    }\r\n\r\n    get nextTxCount() {\r\n        let txCurrent = this, txTop = this;\r\n        while (txCurrent.parent) {\r\n            txCurrent = txCurrent.parent;\r\n            if (txCurrent.taskCtx && txCurrent.taskCtx.isTX) {\r\n                txTop = txCurrent;\r\n            }\r\n        }\r\n        return txTop.txCount++;\r\n    }\r\n}\r\n\r\n/**\r\n * Connection Context\r\n * @module context\r\n * @author Vitaly Tomilov\r\n * @private\r\n */\r\nmodule.exports = {ConnectionContext};\r\n"]},"metadata":{},"sourceType":"script"}